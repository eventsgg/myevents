{"version":3,"sources":["Components/SearchBar/SearchBar.tsx","Components/AuthBtn/AuthBtn.tsx","Components/MainMenu/MainMenu.tsx","Components/Header/Header.tsx","Components/EventCard/EventCard.tsx","Models/EventCardModel.tsx","Components/ShareModal/ShareModal.tsx","Stores/ShareModalStore.tsx","Components/EventCardTileList/EventCardTileList.tsx","Components/Page/Page.tsx","serviceWorker.js","index.tsx"],"names":["SearchBar","react_default","a","createElement","TextField_default","type","variant","label","InputLabelProps","classes","root","this","props","labelRoot","focused","labelFocused","InputProps","outlinedInputRoot","notchedOutline","outlinedInputNotched","outlinedInputFocused","disabled","outlinedInputDisabled","error","outlinedInputError","input","inputRoot","Component","withStyles","color","transform","&$labelFocused","paddingTop","paddingBottom","marginRight","& $outlinedInputNotched, &$outlinedInputFocused $outlinedInputNotched","borderColor","&:hover:not($outlinedInputDisabled):not($outlinedInputFocused):not($outlinedInputError) $outlinedInputNotched","&:hover $outlinedInputNotched","borderWidth","AuthBtn","IconButton_default","AccountCircle_default","MainMenu","List_default","listRoot","items","map","item","i","ListItem_default","divider","button","key","ListItemText_default","primary","title","display","overflowX","Header","Fragment","AppBar_default","Toolbar_default","Typography_default","className","grow","Components_SearchBar_SearchBar","Components_AuthBtn_AuthBtn","headerShim","Components_MainMenu_MainMenu","mainMenuData","main_menu","flexGrow","position","EventCard","observer","shareModalStore","open","_this$props","image","Card_default","style","CardMedia_default","media","src","CardContent_default","CardActions_default","actions","disableActionSpacing","aria-label","Favorite_default","onClick","showShareModal","bind","Share_default","theme","height","EventCardModel","Object","classCallCheck","ShareModal","Dialog_default","onClose","close","DialogTitle_default","disableTypography","titleRoot","closeButtonRoot","Close_default","DialogContent_default","DialogContentText_default","padding","spacing","unit","margin","right","top","palette","grey","ShareModalStore","isOpen","_isOpen","observable","shareModalstore","EventCardTileList","Grid_default","container","mix","EventsData","eventData","eventCardModel","xs","sm","md","Components_EventCard_EventCard","Components_ShareModal_ShareModal","Page","pageRoot","Components_Header_Header","Components_EventCardTileList_EventCardTileList","layoutVertMargin","objectSpread","overflow","mixins","gutters","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","Components_Page_Page","mobx_react_devtools_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ad2f4bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextFileld from '@material-ui/core/TextField';\n\ninterface SearchBarProps {\n    classes: any\n}\n\nclass SearchBar extends Component<SearchBarProps> {\n    render() {\n        return (\n            <TextFileld\n                type=\"search\"\n                variant=\"outlined\"\n                label=\"Поиск по сайту\"\n                InputLabelProps={{\n                    classes: {\n                        root: this.props.classes.labelRoot,\n                        focused: this.props.classes.labelFocused\n                    }\n                }}\n                InputProps={{\n                    classes: {\n                        root: this.props.classes.outlinedInputRoot,\n                        notchedOutline: this.props.classes.outlinedInputNotched,\n                        focused: this.props.classes.outlinedInputFocused,\n                        disabled: this.props.classes.outlinedInputDisabled,\n                        error: this.props.classes.outlinedInputError,\n                        input: this.props.classes.inputRoot\n                    }\n                }}\n            >\n            </TextFileld>   \n        )\n    }\n}\n\nexport default withStyles({\n    labelRoot: {\n        color: 'rgba(255, 255, 255, .65)',\n        transform: 'translate(14px, 14px) scale(1)',\n        '&$labelFocused': {\n            color: 'white'\n        }\n    },\n    labelFocused: {},\n\n    inputRoot: {\n        color: 'white',\n        paddingTop: '12px',\n        paddingBottom: '12px'\n    },\n\n    outlinedInputRoot: {\n        marginRight: '10px',\n        '& $outlinedInputNotched, &$outlinedInputFocused $outlinedInputNotched': {\n            borderColor: 'white'\n        },\n        '&:hover:not($outlinedInputDisabled):not($outlinedInputFocused):not($outlinedInputError) $outlinedInputNotched': {\n            borderColor: 'white'\n        },\n        '&:hover $outlinedInputNotched': {\n            borderWidth: '2px'\n        }\n    },\n    outlinedInputFocused: {},\n    outlinedInputNotched: {},\n    outlinedInputDisabled: {},\n    outlinedInputError: {}\n})(SearchBar);","import React, { Component } from 'react';\nimport IconButton from '@material-ui/core/IconButton'\nimport AuthIcon from '@material-ui/icons/AccountCircle';\n\nclass AuthBtn extends Component {\n    render() {\n        return (\n            <IconButton color=\"inherit\">\n                <AuthIcon/>\n            </IconButton>\n        )\n    }\n}\n\nexport default AuthBtn;","import React, { Component} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\ninterface MenuItem { \n    title: string; \n    url: string; \n}\n\ninterface MainMenuProps {\n    items: MenuItem[];\n    classes: {\n        listRoot: string;\n    }\n}\n\nclass MainMenu extends Component<MainMenuProps> {\n    render() {\n        return (\n            <List classes={{ root: this.props.classes.listRoot }}>\n                {\n                    this.props.items.map((item, i) => (\n                        <ListItem divider={true} button key={i}>\n                            <ListItemText primary={ item.title } />\n                        </ListItem>\n                    ))\n                }\n            </List>\n        );\n\n    }\n}\n\nexport default withStyles({\n    listRoot: {\n        display: 'flex',\n        overflowX: 'scroll'\n    }\n})(MainMenu);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport SearchBar from '../SearchBar/SearchBar';\nimport AuthBtn from '../AuthBtn/AuthBtn';\nimport MainMenu from '../MainMenu/MainMenu';\nimport mainMenuData from './MainMenuData.json';\n\ninterface HeaderProps {\n    classes: {\n        grow: string;\n        headerShim: string;\n    }\n}\n\nclass Header extends Component<HeaderProps> {\n    render() {\n        return (\n            <>\n                <AppBar>\n                    <Toolbar>\n                        <Typography className={ this.props.classes.grow } color=\"inherit\" variant=\"headline\">\n                            My events\n                        </Typography>\n\n                        <SearchBar/>\n\n                        <AuthBtn/>\n                    </Toolbar>\n                </AppBar>\n\n                <Toolbar className={ this.props.classes.headerShim }/>\n\n                <MainMenu items={ mainMenuData.main_menu }/>\n            </>\n        )\n    }\n}\n\nexport default withStyles({\n    grow: {\n        flexGrow: 1\n    },\n    headerShim: {\n        position: 'static'\n    }\n})(Header);","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\n\nconst styles = theme => ({\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  actions: {\n    display: 'flex',\n  }\n});\n\ninterface EventCardProps {\n    classes: {\n        media: string;\n        actions: string;\n    };\n    image: {\n      src: string;\n      title: string;\n    };\n    title: string;\n    style?: object;\n    shareModalStore: {\n      open: boolean;\n    }\n}\n\n@observer class EventCard extends Component<EventCardProps> {\n  showShareModal() {\n    this.props.shareModalStore.open = true;\n  }\n\n  render() {\n    const { classes, image, title } = this.props;\n\n    return (\n      <Card style={this.props.style}>\n\n        <CardMedia className={ classes.media } image={ image.src } title={ image.title }/>\n\n        <CardContent>\n          <Typography variant={'title'}>{ title }</Typography>\n        </CardContent>\n\n        <CardActions className={classes.actions} disableActionSpacing>\n\n          <IconButton aria-label=\"Добавить в избранное\">\n            <FavoriteIcon />\n          </IconButton>\n\n          <IconButton onClick={this.showShareModal.bind(this)} aria-label=\"Поделиться\">\n            <ShareIcon />\n          </IconButton>\n\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(EventCard);","interface eventCardImage {\n    src: string;\n    title: string;\n}\n\nclass EventCardModel {\n    constructor(public image: eventCardImage, public title: string) {\n        this.image = image;\n        this.title = title;\n    }\n}\n\nexport default EventCardModel;","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\ninterface ShareModalProps {\n    shareModalStore: {\n        open: boolean;\n    }\n    classes: any\n}\n\n@observer class ShareModal extends Component<ShareModalProps> {\n    close() {\n        this.props.shareModalStore.open = false;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Dialog\n                open={this.props.shareModalStore.open} \n                onClose={this.close.bind(this)}\n            >\n                <DialogTitle disableTypography className={classes.titleRoot}>\n                    <Typography variant=\"h6\">Расшарь, слыш?</Typography>\n                    <IconButton className={classes.closeButtonRoot} onClick={this.close.bind(this)}>\n                        <CloseIcon/>\n                    </IconButton>\n                </DialogTitle>\n\n                <DialogContent>\n                    <DialogContentText>\n                        Соц сеточка 1, соц сеточка2\n                        Соц сеточка 1, соц сеточка2\n                        Соц сеточка 1, соц сеточка2\n                        Соц сеточка 1, соц сеточка2\n                    </DialogContentText>\n                </DialogContent>\n\n            </Dialog>\n\n        )\n    }\n}\n\nexport default withStyles(theme => ({\n    titleRoot: {\n        padding: theme.spacing.unit * 2,\n        margin: 0,\n        marginRight: 50\n    },\n    closeButtonRoot: {\n        position: 'absolute',\n        right: theme.spacing.unit,\n        top: theme.spacing.unit,\n        color: theme.palette.grey[500],\n    }\n}))(ShareModal);","import { observable } from 'mobx';\n\nclass ShareModalStore {\n    @observable private _isOpen = false;\n\n    set open(isOpen: boolean){\n        this._isOpen = isOpen;\n    }\n\n    get open(): boolean {\n        return this._isOpen;\n    }\n}\n\nexport default ShareModalStore;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport EventCard from '../EventCard/EventCard';\nimport EventCardModel from '../../Models/EventCardModel';\nimport ShareModal from '../ShareModal/ShareModal';\nimport ShareModalStore from '../../Stores/ShareModalStore';\nimport EventsData from './EventsData.json';\n\ninterface EventCardTileListProps {\n    mix?: string;\n}\n\nlet shareModalstore = new ShareModalStore();\n\nclass EventCardTileList extends Component<EventCardTileListProps> {\n    render() {\n        return (\n            <>\n                <Grid container spacing={32} className={this.props.mix}>\n                    {\n                        EventsData['events'].map((eventData, i) => {\n                            let eventCardModel = new EventCardModel(eventData.image, eventData.title);\n\n                            return (\n                                <Grid item xs={12} sm={4} md={3} key={i}>\n                                    <EventCard\n                                        image={eventCardModel.image} \n                                        title={eventCardModel.title} \n                                        key={i}\n                                        shareModalStore={shareModalstore}\n                                    >\n                                    </EventCard>\n                                </Grid>\n                            )\n                        })\n                    }\n                </Grid>\n\n                <ShareModal shareModalStore={shareModalstore} />>\n            </>\n        )\n    }\n}\n\nexport default EventCardTileList;","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Header from '../Header/Header';\nimport EventCardTileList from '../EventCardTileList/EventCardTileList';\n\nconst styles = theme => ({\n  pageRoot: {\n    overflow: 'hidden',\n    ...theme.mixins.gutters()\n  },\n  layoutVertMargin: {\n    marginTop: '20px'\n  }\n});\n\ninterface PageProps {\n  classes: {\n    pageRoot: string;\n    layoutVertMargin: string;\n  }\n}\n\nclass Page extends Component<PageProps> {\n  render() {\n    var { classes } = this.props;\n\n    return (\n      <div className={classes.pageRoot}>\n        <Header/>\n        <EventCardTileList mix={classes.layoutVertMargin}/>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Page);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Page from './Components/Page/Page';\nimport * as serviceWorker from './serviceWorker';\nimport MobxDevTools from 'mobx-react-devtools';\n\nReactDOM.render((\n    <>\n        <Page />\n        <MobxDevTools />\n    </>\n), document.getElementById('root'));\n        \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}